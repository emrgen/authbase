syntax = "proto3";

package apis.v1;

option go_package = "github.com/emrgen/authbase/proto/v1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

message User {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string name = 3;

  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message Page {
  int32 page = 1;
  int32 size = 2;
}

message Meta {
  int32 total = 1;
  int32 page = 2;
  int32 size = 3;
}

message SignupRequest {
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string.min_len = 8, (validate.rules).string.max_len = 64];
  string name = 3 [(validate.rules).string.min_len = 3, (validate.rules).string.max_len = 64];
}

message Tokens {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message SignupResponse {
  optional Tokens tokens = 1;
  bool email_verification_required = 2;
}

message LoginRequest {
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string.min_len = 8, (validate.rules).string.max_len = 64];
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message RefreshRequest {
  string refresh_token = 1;
}

message RefreshResponse {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailResponse {
  string message = 1;
}

service AuthService {
  rpc Signup(SignupRequest) returns (SignupResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signup"
      body: "*"
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }

  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
      body: "*"
    };
  }

  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v1/auth/verify-email"
      body: "*"
    };
  }
}

message AuthorizeRequest {
  string provider = 1;
  string organization = 2;
  optional string access_token = 3;
}

message AuthorizeResponse {
  optional Tokens tokens = 1;
}

message CallbackRequest {
  string code = 1;
  string state = 3;
}

message CallbackResponse {
  optional Tokens tokens = 1;
}

message TokenRequest {
  string code = 1;
  string provider = 2;
  string organization = 3;
  string state = 4;
}

message TokenResponse {
  Tokens tokens = 1;
}

service OauthService {
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
    option (google.api.http) = {
      post: "/v1/oauth/authorize"
      body: "*"
    };
  }

  rpc Callback(CallbackRequest) returns (CallbackResponse) {
    option (google.api.http) = {
      post: "/v1/oauth/callback"
      body: "*"
    };
  }

  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/v1/oauth/token"
      body: "*"
    };
  }
}

message ListUsersRequest {
  Page page = 1;
}

message ListUsersResponse {
  repeated User users = 1;
}

message GetUserRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string name = 3;
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteUserResponse {
  string message = 1;
}

service UserService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
  }

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "*"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{id}"
    };
  }
}

message CreateOrganizationRequest {
  string name = 1 [(validate.rules).string.min_len = 3, (validate.rules).string.max_len = 64];
  string username = 2 [(validate.rules).string.min_len = 3, (validate.rules).string.max_len = 64];
  string email = 3 [(validate.rules).string.email = true];
  optional string password = 4 [(validate.rules).string.min_len = 8, (validate.rules).string.max_len = 64];
  optional bool verify_email = 5;
}

message CreateOrganizationResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message Organization {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;

  string owner_id = 10 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message GetOrganizationRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message ListOrganizationsRequest {
  Page page = 1;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  Meta meta = 2;
}

message UpdateOrganizationRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [(validate.rules).string.min_len = 3, (validate.rules).string.max_len = 64];
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message DeleteOrganizationRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteOrganizationResponse {
  string message = 1;
}

message AddOauthProviderRequest {
  string provider = 1;
  string client_id = 2;
  string client_secret = 3;
  string organization_id = 4 [(validate.rules).string.uuid = true];
}

message AddOauthProviderResponse {
  string message = 1;
}

message GetOauthProviderRequest {
  string provider = 1;
  string organization_id = 2 [(validate.rules).string.uuid = true];
}

message GetOauthProviderResponse {
  string client_id = 1;
  string client_secret = 2;
}

message ListOauthProvidersRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListOauthProvidersResponse {
  repeated string providers = 1;
}

message UpdateOauthProviderRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string provider = 2;
  string client_id = 3;
  string client_secret = 4;
}

message UpdateOauthProviderResponse {
  string message = 1;
}

message DeleteOauthProviderRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string provider = 2;
}

message DeleteOauthProviderResponse {
  string message = 1;
}

service OrganizationService {
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations"
      body: "*"
    };
  }

  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{id}"
    };
  }

  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
  }

  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{id}"
      body: "*"
    };
  }

  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{id}"
    };
  }

  rpc AddOauthProvider(AddOauthProviderRequest) returns (AddOauthProviderResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/oauth-providers"
      body: "*"
    };
  }

  rpc GetOauthProvider(GetOauthProviderRequest) returns (GetOauthProviderResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/oauth-providers/{provider}"
    };
  }

  rpc ListOauthProviders(ListOauthProvidersRequest) returns (ListOauthProvidersResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/oauth-providers"
    };
  }

  rpc UpdateOauthProvider(UpdateOauthProviderRequest) returns (UpdateOauthProviderResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/oauth-providers/{provider}"
      body: "*"
    };
  }

  rpc DeleteOauthProvider(DeleteOauthProviderRequest) returns (DeleteOauthProviderResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{id}/oauth-providers/{provider}"
    };
  }
}

message Member {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string name = 3;
  repeated Permission permissions = 4;
}

message CreateMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  repeated Permission permissions = 3;
}

message CreateMemberResponse {
  string message = 1;
}

message GetMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message GetMemberResponse {
  Member member = 1;
}

message ListMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListMemberResponse {
  repeated Member members = 1;
}

message UpdateMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permissions = 3;
}

message UpdateMemberResponse {
  string message = 1;
}

message DeleteMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message DeleteMemberResponse {
  string message = 1;
}

service MemberService {
  rpc CreateMember(CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/members"
      body: "*"
    };
  }

  rpc GetMember(GetMemberRequest) returns (GetMemberResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/members/{member_id}"
    };
  }

  rpc ListMember(ListMemberRequest) returns (ListMemberResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/members"
    };
  }

  rpc UpdateMember(UpdateMemberRequest) returns (UpdateMemberResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/members/{member_id}"
      body: "*"
    };
  }

  rpc DeleteMember(DeleteMemberRequest) returns (DeleteMemberResponse) {
    option (google.api.http) = {
      delete: "/v1/members/organizations/{organization_id}/members/{member_id}"
    };
  }
}

enum Permission {
  NONE = 0;
  READ = 1;
  WRITE = 2;
}

message CreatePermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permissions = 3;
}

message CreatePermissionResponse {
  string message = 1;
}

message GetPermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message GetPermissionResponse {
  repeated Permission permissions = 1;
}

message UpdatePermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permissions = 3;
}

message UpdatePermissionResponse {
  string message = 1;
}

message DeletePermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message DeletePermissionResponse {
  string message = 1;
}

service PermissionService {
  rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/members/{member_id}/permissions"
      body: "*"
    };
  }

  // Get permissions of a user in an organization
  rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/members/{member_id}/permissions"
    };
  }

  // Update permissions of a user in an organization
  rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/members/{member_id}/permissions"
      body: "*"
    };
  }

  rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}/members/{member_id}/permissions"
    };
  }
}