syntax = "proto3";

package authbase.apis.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/emrgen/authbase/proto/v1";

message User {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  bool disabled = 4;
  bool member = 5;

  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  optional google.protobuf.Timestamp verified_at = 12;
}

message Page {
  int32 page = 1;
  int32 size = 2;
}

message Meta {
  int32 total = 1;
  int32 page = 2;
  int32 size = 3;
}

message RegisterRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string username = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message RegisterResponse {
  string message = 1;
}

message Tokens {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message LoginRequest {
  string email = 2 [(validate.rules).string.email = true];
  string password = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string organization_id = 4 [(validate.rules).string.uuid = true];
}

message AuthToken {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp issued_at = 4;
  google.protobuf.Timestamp refresh_expires_at = 5;
}

message LoginResponse {
  User user = 1;
  AuthToken token = 2;
}

message LogoutRequest {
  string access_token = 1;
}

message LogoutResponse {
  string message = 1;
}

message RevokeAllSessionsRequest {
  string user_id = 1 [(validate.rules).string.uuid = true];
}

message RevokeAllSessionsResponse {
  uint64 session_count = 1;
  string message = 2;
}

message RefreshRequest {
  string refresh_token = 1;
  optional string organization_id = 2 [(validate.rules).string.uuid = true];
}

message RefreshResponse {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp issued_at = 4;
  google.protobuf.Timestamp refresh_expires_at = 5;
}

message VerifyEmailRequest {
  string token = 1;
  string organization_id = 2 [(validate.rules).string.uuid = true];
}

message VerifyEmailResponse {
  string message = 1;
}

message UserEmailExistsRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message UserEmailExistsResponse {
  bool email_exists = 1;
  bool username_exists = 2;
}

// Auth service

service AuthService {
  // UserEmailExists
  rpc UserEmailExists(UserEmailExistsRequest) returns (UserEmailExistsResponse) {
    option (google.api.http) = {
      post: "/v1/auth/check-user"
      body: "*"
    };
  }

  // Register
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signup"
      body: "*"
    };
  }

  // Login
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }

  // Logout
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }

  // LogoutAll
  rpc RevokeAllSessions(RevokeAllSessionsRequest) returns (RevokeAllSessionsResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout-all"
      body: "*"
    };
  }

  // Refresh
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
      body: "*"
    };
  }

  // VerifyEmail
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v1/auth/verify-email"
      body: "*"
    };
  }
}

message OAuthLoginRequest {
  string organization_id = 1;
  string provider = 2;
}

message OAuthLoginResponse {
  OAuthProvider provider = 1;
  string callback_url = 2;
}

message OAuthCallbackRequest {
  string code = 1;
  string state = 3;
}

message OAuthCallbackResponse {
  optional Tokens tokens = 1;
}

message TokenRequest {
  string code = 1;
  string provider = 2;
  string organization = 3;
  string state = 4;
}

message TokenResponse {
  Tokens tokens = 1;
}

message OauthLogoutRequest {
  string access_token = 3;
}

message OauthLogoutResponse {
  string message = 1;
}

message VerifyOAuthTokenRequest {
  string token = 1;
}

message VerifyOAuthTokenResponse {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permission = 3;
}

service OauthService {
  // OAuthLogin
  rpc OAuthLogin(OAuthLoginRequest) returns (OAuthLoginResponse) {
    option (google.api.http) = {
      post: "/v1/oauth/authorize"
      body: "*"
    };
  }

  // OAuthCallback
  rpc OAuthCallback(OAuthCallbackRequest) returns (OAuthCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/oauth/callback"
      body: "*"
    };
  }

  rpc OAuthVerifyToken(VerifyOAuthTokenRequest) returns (VerifyOAuthTokenResponse) {
    option (google.api.http) = {
      post: "/v1/oauth/verify"
      body: "*"
    };
  }
}

message Token {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string token = 3;
  string organization_id = 4;
  string user_id = 5;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp expires_at = 11;
}

message CreateTokenRequest {
  string organization_id = 1;
  string email = 2 [
    (validate.rules).string.min_len = 6,
    (validate.rules).string.max_len = 64
  ];
  string password = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional int64 expires_in = 4; // in seconds
  optional string name = 5;
  map<string, string> data = 6; // additional data
}

message CreateTokenResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string token = 2;
  google.protobuf.Timestamp expires_at = 10;
}

message GetTokenRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetTokenResponse {
  Token token = 1;
}

message ListTokensRequest {
  string user_id = 1 [(validate.rules).string.uuid = true];
  string organization_id = 2 [(validate.rules).string.uuid = true];
  optional string token = 3;
  optional string password = 4;
  Page page = 5;
}

message ListTokensResponse {
  repeated Token tokens = 1;
  Meta meta = 2;
}

message DeleteTokenRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteTokenResponse {
  string message = 1;
}

message OfflineTokenVerifyRequest {
  string token = 1;
}

message OfflineTokenVerifyResponse {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permission = 3;
}

// Token service

service OfflineTokenService {
  // CreateToken
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
    option (google.api.http) = {
      post: "/v1/tokens/organizations/{organization_id}"
      body: "*"
    };
  }

  // GetToken
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
    option (google.api.http) = {get: "/v1/tokens/{id}"};
  }

  // ListTokens
  rpc ListTokens(ListTokensRequest) returns (ListTokensResponse) {
    option (google.api.http) = {get: "/v1/tokens/-/organizations/{organization_id}/users/{user_id}"};
  }

  // DeleteToken
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {
    option (google.api.http) = {delete: "/v1/tokens/{id}"};
  }

  // VerifyToken
  rpc VerifyOfflineToken(OfflineTokenVerifyRequest) returns (OfflineTokenVerifyResponse) {
    option (google.api.http) = {post: "/v1/tokens/-/verify"};
  }
}

message CreateUserRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 11
  ];
}

message CreateUserResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  google.protobuf.Timestamp created_at = 10;
}

message GetUserRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetUserResponse {
  User user = 1;
}

message ListUsersRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  Meta meta = 2;
}

message UpdateUserRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string username = 2;
  string email = 3 [(validate.rules).string.email = true];
  string organization_id = 4 [(validate.rules).string.uuid = true];
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string organization_id = 2 [(validate.rules).string.uuid = true];
}

message DeleteUserResponse {
  string message = 1;
}

message ActiveUsersRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  optional Page page = 2;
}

message ActiveUsersResponse {
  repeated User users = 1;
  Meta meta = 2;
}

message InactiveUserRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
}

message InactiveUserResponse {
  string message = 1;
}

message DisableUserRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
}

message DisableUserResponse {
  string message = 1;
}

message EnableUserRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string user_id = 2 [(validate.rules).string.uuid = true];
}

message EnableUserResponse {
  string message = 1;
}

// User service

service UserService {
  // CreateUser
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  // GetUser
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {post: "/v1/users/{id}"};
  }

  // ListUsers
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {get: "/v1/users/-/organizations/{organization_id}"};
  }

  // UpdateUser
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "*"
    };
  }

  // DeleteUser
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {delete: "/v1/users/{id}"};
  }

  // ActiveUsers
  rpc ActiveUsers(ActiveUsersRequest) returns (ActiveUsersResponse) {
    option (google.api.http) = {get: "/v1/users/active"};
  }

  // InactiveUser
  rpc InactiveUser(InactiveUserRequest) returns (InactiveUserResponse) {
    option (google.api.http) = {delete: "/v1/users/-/deactivate/{user_id}"};
  }

  // DisableUser
  rpc DisableUser(DisableUserRequest) returns (DisableUserResponse) {
    option (google.api.http) = {delete: "/v1/users/-/disable/{user_id}"};
  }

  // EnableUser
  rpc EnableUser(EnableUserRequest) returns (EnableUserResponse) {
    option (google.api.http) = {delete: "/v1/users/-/enable/{user_id}"};
  }
}

message CreateOrganizationRequest {
  string name = 1 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string username = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  optional string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional string organization_id = 5 [(validate.rules).string.uuid = true];
  optional bool verify_email = 6;
}

message CreateOrganizationResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message Organization {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  bool master = 3;
  string owner_id = 10 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message GetOrganizationRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message GetOrganizationIdRequest {
  string name = 1;
}

message GetOrganizationIdResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message ListOrganizationsRequest {
  Page page = 1;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  Meta meta = 2;
}

message UpdateOrganizationRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message DeleteOrganizationRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteOrganizationResponse {
  string message = 1;
}

message OAuthProvider {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string client_id = 3;
  string client_secret = 4;
  repeated string redirect_uris = 5;
}

message AddOauthProviderRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  OAuthProvider provider = 2;
}

message AddOauthProviderResponse {
  string message = 1;
}

message GetOauthProviderRequest {
  string provider = 1;
  string organization_id = 2 [(validate.rules).string.uuid = true];
}

message GetOauthProviderResponse {
  OAuthProvider provider = 1;
}

message ListOauthProvidersRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListOauthProvidersResponse {
  repeated OAuthProvider providers = 1;
  Meta meta = 2;
}

message UpdateOauthProviderRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string provider = 2;
  string client_id = 3;
  string client_secret = 4;
  repeated string redirect_uris = 5;
}

message UpdateOauthProviderResponse {
  string message = 1;
}

message DeleteOauthProviderRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteOauthProviderResponse {
  string message = 1;
}

// Organization service

service OrganizationService {
  // CreateOrganization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations"
      body: "*"
    };
  }

  // GetOrganization
  rpc GetOrganizationId(GetOrganizationIdRequest) returns (GetOrganizationIdResponse) {
    option (google.api.http) = {get: "/v1/organizations/-/name/{name}"};
  }

  // GetOrganization
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {get: "/v1/organizations/{id}"};
  }

  // ListOrganizations
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {get: "/v1/organizations"};
  }

  // UpdateOrganization
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{id}"
      body: "*"
    };
  }

  // DeleteOrganization
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{id}"};
  }

  // AddOauthProvider
  rpc AddOauthProvider(AddOauthProviderRequest) returns (AddOauthProviderResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/oauth-providers"
      body: "*"
    };
  }

  // GetOauthProvider
  rpc GetOauthProvider(GetOauthProviderRequest) returns (GetOauthProviderResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_id}/oauth-providers/{provider}"};
  }

  // ListOauthProviders
  rpc ListOauthProviders(ListOauthProvidersRequest) returns (ListOauthProvidersResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_id}/oauth-providers"};
  }

  // UpdateOauthProvider
  rpc UpdateOauthProvider(UpdateOauthProviderRequest) returns (UpdateOauthProviderResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/oauth-providers/{provider}"
      body: "*"
    };
  }

  // DeleteOauthProvider
  rpc DeleteOauthProvider(DeleteOauthProviderRequest) returns (DeleteOauthProviderResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{id}/oauth-providers"};
  }
}

message CreateAdminOrganizationRequest {
  string name = 1 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ]; // organization name
  string username = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  optional string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional bool verify_email = 5;
}

message CreateAdminOrganizationResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message CreateMigrationRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
}

message CreateMigrationResponse {
  string message = 1;
}

service AdminOrganizationService {
  // CreateAdminOrganization
  rpc CreateAdminOrganization(CreateAdminOrganizationRequest) returns (CreateAdminOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/admin/organizations"
      body: "*"
    };
  }

  // CreateMigration
  rpc CreateMigration(CreateMigrationRequest) returns (CreateMigrationResponse) {
    option (google.api.http) = {
      post: "/v1/admin/migrations"
      body: "*"
    };
  }
}

message Member {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  Permission permission = 4;
}

message CreateMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string username = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  Permission permission = 4;
}

message CreateMemberResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message GetMemberResponse {
  Member member = 1;
}

message ListMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListMemberResponse {
  repeated Member members = 1;
  Meta meta = 2;
}

message UpdateMemberRequest {
  string member_id = 2 [(validate.rules).string.uuid = true];
  Permission permission = 5;
}

message UpdateMemberResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string message = 2;
}

message AddMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  Permission permission = 3;
}

message AddMemberResponse {
  string message = 1;
}

message RemoveMemberRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message RemoveMemberResponse {
  string message = 1;
}

// Member service

service MemberService {
  // CreateMember
  rpc CreateMember(CreateMemberRequest) returns (CreateMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members/-/organizations/{organization_id}"
      body: "*"
    };
  }

  // GetMember
  rpc GetMember(GetMemberRequest) returns (GetMemberResponse) {
    option (google.api.http) = {get: "/v1/members/{member_id}/organizations/{organization_id}"};
  }

  // ListMember
  rpc ListMember(ListMemberRequest) returns (ListMemberResponse) {
    option (google.api.http) = {get: "/v1/members/-/organization/{organization_id}"};
  }

  // UpdateMember
  rpc UpdateMember(UpdateMemberRequest) returns (UpdateMemberResponse) {
    option (google.api.http) = {
      put: "/v1/members/{member_id}"
      body: "*"
    };
  }

  // AddMember
  rpc AddMember(AddMemberRequest) returns (AddMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members/organizations/{organization_id}/members/{member_id}"
      body: "*"
    };
  }

  // RemoveMember
  rpc RemoveMember(RemoveMemberRequest) returns (RemoveMemberResponse) {
    option (google.api.http) = {delete: "/v1/members/organizations/{organization_id}/members/{member_id}"};
  }
}

enum Permission {
  UNKNOWN = 0;
  NONE = 1;
  READ = 2;
  WRITE = 4;
  ADMIN = 8;
}

message CreatePermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permissions = 3;
}

message CreatePermissionResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string message = 2;
}

message GetPermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message GetPermissionResponse {
  repeated Permission permissions = 1;
}

message UpdatePermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permissions = 3;
}

message UpdatePermissionResponse {
  string message = 1;
}

message DeletePermissionRequest {
  string organization_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message DeletePermissionResponse {
  string message = 1;
}

// Permission service

// Permissions
service PermissionService {
  // CreatePermission
  rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/members/{member_id}/permissions"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create permission"
      description: "Create permission for a member"
      responses: {
        key: "200"
        value: {description: "Permission created"}
      }
    };
  }

  // GetPermission
  rpc GetPermission(GetPermissionRequest) returns (GetPermissionResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_id}/members/{member_id}/permissions"};
  }

  // UpdatePermission
  rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/members/{member_id}/permissions"
      body: "*"
    };
  }

  // DeletePermission
  rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization_id}/members/{member_id}/permissions"};
  }
}
