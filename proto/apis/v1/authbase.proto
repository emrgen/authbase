syntax = "proto3";

package authbase.apis.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/emrgen/authbase/proto/v1";

message Project {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  bool master = 3;
  string owner_id = 10 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message CreateProjectRequest {
  string name = 1 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string visible_name = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  optional string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional string project_id = 5 [(validate.rules).string.uuid = true];
  optional bool verify_email = 6;
}

message CreateProjectResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message GetProjectRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetProjectResponse {
  Project project = 1;
  uint64 members = 2;
  uint64 accounts = 3;
}

message GetProjectIdRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetProjectIdResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message ListProjectsRequest {
  Page page = 1;
}

message ListProjectsResponse {
  repeated Project projects = 1;
  Meta meta = 2;
}

message UpdateProjectRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message UpdateProjectResponse {
  Project project = 1;
}

message DeleteProjectRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteProjectResponse {
  string message = 1;
}

message GetProjectConfigRequest {}

// Project member service

message ProjectMember {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  string visible_name = 4;
  Permission permission = 5;
}

message CreateProjectMemberRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string username = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  string visible_name = 4;
  Permission permission = 5;
}

message CreateProjectMemberResponse {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetProjectMemberRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message GetProjectMemberResponse {
  ProjectMember project_member = 1;
}

message ListProjectMemberRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListProjectMemberResponse {
  repeated ProjectMember members = 1;
  Meta meta = 2;
}

message UpdateProjectMemberRequest {
  string member_id = 2 [(validate.rules).string.uuid = true];
  Permission permission = 5;
}

message UpdateProjectMemberResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string message = 2;
}

message AddProjectMemberRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
  Permission permission = 3;
}

message AddProjectMemberResponse {
  string message = 1;
}

message RemoveProjectMemberRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string member_id = 2 [(validate.rules).string.uuid = true];
}

message RemoveProjectMemberResponse {
  string message = 1;
}

service ProjectMemberService {
  // CreateMember
  rpc CreateProjectMember(CreateProjectMemberRequest) returns (CreateProjectMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members/-/projects/{project_id}"
      body: "*"
    };
  }

  // GetMember
  rpc GetProjectMember(GetProjectMemberRequest) returns (GetProjectMemberResponse) {
    option (google.api.http) = {get: "/v1/members/{member_id}/projects/{project_id}"};
  }

  // ListMember
  rpc ListProjectMember(ListProjectMemberRequest) returns (ListProjectMemberResponse) {
    option (google.api.http) = {get: "/v1/members/-/project/{project_id}"};
  }

  // UpdateMember
  rpc UpdateProjectMember(UpdateProjectMemberRequest) returns (UpdateProjectMemberResponse) {
    option (google.api.http) = {
      put: "/v1/members/{member_id}"
      body: "*"
    };
  }

  // AddMember
  rpc AddProjectMember(AddProjectMemberRequest) returns (AddProjectMemberResponse) {
    option (google.api.http) = {
      post: "/v1/members/projects/{project_id}/members/{member_id}"
      body: "*"
    };
  }

  // RemoveMember
  rpc RemoveProjectMember(RemoveProjectMemberRequest) returns (RemoveProjectMemberResponse) {
    option (google.api.http) = {delete: "/v1/members/projects/{project_id}/members/{member_id}"};
  }
}

// Pool service

message Pool {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string project_id = 3 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreatePoolRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  repeated PoolMember members = 3;
}

message CreatePoolResponse {
  Pool pool = 1;
}

message GetPoolRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
}

message GetPoolResponse {
  Pool pool = 1;
  uint32 users = 2;
  uint32 members = 4;
  uint32 clients = 3;
}

message ListPoolsRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListPoolsResponse {
  repeated Pool pools = 1;
  Meta meta = 2;
}

message UpdatePoolRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
}

message UpdatePoolResponse {
  Pool pool = 1;
}

message DeletePoolRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
}

message DeletePoolResponse {
  string message = 1;
}

service PoolService {
  // CreatePool
  rpc CreatePool(CreatePoolRequest) returns (CreatePoolResponse) {
    option (google.api.http) = {
      post: "/v1/pools/projects/{project_id}"
      body: "*"
    };
  }

  // GetPool
  rpc GetPool(GetPoolRequest) returns (GetPoolResponse) {
    option (google.api.http) = {get: "/v1/pools/{pool_id}"};
  }

  // ListPools
  rpc ListPools(ListPoolsRequest) returns (ListPoolsResponse) {
    option (google.api.http) = {get: "/v1/pools"};
  }

  // UpdatePool
  rpc UpdatePool(UpdatePoolRequest) returns (UpdatePoolResponse) {
    option (google.api.http) = {
      put: "/v1/pools/{pool_id}"
      body: "*"
    };
  }

  // DeletePool
  rpc DeletePool(DeletePoolRequest) returns (DeletePoolResponse) {
    option (google.api.http) = {delete: "/v1/pools/{pool_id}"};
  }
}

// PoolMember service

message PoolMember {
  string pool_id = 2 [(validate.rules).string.uuid = true];
  string account_id = 3 [(validate.rules).string.uuid = true];
  Permission permission = 4;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreatePoolMemberRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
  Permission permission = 3;
}

message CreatePoolMemberResponse {
  PoolMember pool_member = 1;
}

message GetPoolMemberRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
}

message GetPoolMemberResponse {
  PoolMember pool_member = 1;
}

message ListPoolMembersRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListPoolMembersResponse {
  repeated PoolMember pool_members = 1;
  Meta meta = 2;
}

message UpdatePoolMemberRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
  Permission permission = 3;
}

message UpdatePoolMemberResponse {
  PoolMember pool_member = 1;
}

message DeletePoolMemberRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
}

message DeletePoolMemberResponse {
  string message = 1;
}

service PoolMemberService {
  // CreatePoolMember
  rpc CreatePoolMember(CreatePoolMemberRequest) returns (CreatePoolMemberResponse) {
    option (google.api.http) = {
      post: "/v1/pool-members/pools/{pool_id}"
      body: "*"
    };
  }

  // GetPoolMember
  rpc GetPoolMember(GetPoolMemberRequest) returns (GetPoolMemberResponse) {
    option (google.api.http) = {get: "/v1/pool-members/{pool_id}/{account_id}"};
  }

  // ListPoolMembers
  rpc ListPoolMembers(ListPoolMembersRequest) returns (ListPoolMembersResponse) {
    option (google.api.http) = {get: "/v1/pool-members"};
  }

  // UpdatePoolMember
  rpc UpdatePoolMember(UpdatePoolMemberRequest) returns (UpdatePoolMemberResponse) {
    option (google.api.http) = {
      put: "/v1/pool-members/{pool_id}/{account_id}"
      body: "*"
    };
  }

  // DeletePoolMember
  rpc DeletePoolMember(DeletePoolMemberRequest) returns (DeletePoolMemberResponse) {
    option (google.api.http) = {delete: "/v1/pool-members/{pool_id}/{account_id}"};
  }
}

// Role service

message Role {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string pool_id = 3 [(validate.rules).string.uuid = true];
  map<string, string> attributes = 5;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateRoleRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  map<string, string> attributes = 3;
}

message CreateRoleResponse {
  Role role = 1;
}

message GetRoleRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string role_name = 2 [(validate.rules).string.uuid = true];
}

message GetRoleResponse {
  Role role = 1;
}

message ListRolesRequest {
  optional string pool_id = 1 [(validate.rules).string.uuid = true];
  optional string account_id = 2 [(validate.rules).string.uuid = true];
  optional string group_id = 3 [(validate.rules).string.uuid = true];
  Page page = 4;
}

message ListRolesResponse {
  repeated Role roles = 1;
  Meta meta = 2;
}

message UpdateRoleRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string role_name = 2 [(validate.rules).string.uuid = true];
  map<string, string> attributes = 3;
}

message UpdateRoleResponse {
  Role role = 1;
}

message DeleteRoleRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string role_name = 2 [(validate.rules).string.uuid = true];
}

message DeleteRoleResponse {
  string message = 1;
}

service RoleService {
  // CreateRole
  rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
    option (google.api.http) = {
      post: "/v1/roles"
      body: "*"
    };
  }

  // GetRole
  rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
    option (google.api.http) = {get: "/v1/roles/{role_name}"};
  }

  // ListRoles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {get: "/v1/roles"};
  }

  // UpdateRole
  rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
    option (google.api.http) = {
      put: "/v1/roles/{role_name}"
      body: "*"
    };
  }

  // DeleteRole
  rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
    option (google.api.http) = {delete: "/v1/roles/{role_name}"};
  }
}

// PoolGroup service

message Group {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string pool_id = 3 [(validate.rules).string.uuid = true];
  repeated Role roles = 4;
  map<string, string> attributes = 5;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateGroupRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  repeated string role_names = 3;
}

message CreateGroupResponse {
  Group group = 1;
}

message GetGroupRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
}

message GetGroupResponse {
  Group group = 1;
}

message ListGroupsRequest {
  optional string pool_id = 1 [(validate.rules).string.uuid = true];
  optional string account_id = 2 [(validate.rules).string.uuid = true];
  Page page = 3;
}

message ListGroupsResponse {
  repeated Group groups = 1;
  Meta meta = 2;
}

message UpdateGroupRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
  string name = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  repeated string role_names = 4;
}

message UpdateGroupResponse {
  Group group = 1;
}

message DeleteGroupRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
}

message DeleteGroupResponse {
  string message = 1;
}

message AddRoleRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
  string role_name = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message AddRoleResponse {
  string message = 1;
}

message RemoveRoleRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
  string role_name = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message RemoveRoleResponse {
  string message = 1;
}

message AddGroupMemberRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
  string account_id = 3 [(validate.rules).string.uuid = true];
}

message AddGroupMemberResponse {
  string message = 1;
}

message RemoveGroupMemberRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
  string account_id = 3 [(validate.rules).string.uuid = true];
}

message RemoveGroupMemberResponse {
  string message = 1;
}

message ListGroupMembersRequest {
  string group_id = 2 [(validate.rules).string.uuid = true];
  Page page = 3;
}

message ListGroupMembersResponse {
  repeated Account members = 1;
  repeated Role roles = 2;
  Meta meta = 3;
}

service GroupService {
  // CreateGroup
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/v1/groups"
      body: "*"
    };
  }

  // GetGroup
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {get: "/v1/groups/{group_id}"};
  }

  // ListGroups
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = {get: "/v1/groups"};
  }

  // UpdateGroup
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      put: "/v1/groups/{group_id}"
      body: "*"
    };
  }

  // DeleteGroup
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {delete: "/v1/groups/{group_id}"};
  }

  // AddRole
  rpc AddRole(AddRoleRequest) returns (AddRoleResponse) {
    option (google.api.http) = {
      post: "/v1/groups/{group_id}/roles"
      body: "*"
    };
  }

  // RemoveRole
  rpc RemoveRole(RemoveRoleRequest) returns (RemoveRoleResponse) {
    option (google.api.http) = {delete: "/v1/groups/{group_id}/roles"};
  }

  // AddGroupMember
  rpc AddGroupMember(AddGroupMemberRequest) returns (AddGroupMemberResponse) {
    option (google.api.http) = {
      post: "/v1/groups/{group_id}"
      body: "*"
    };
  }

  // RemoveGroupMember
  rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (RemoveGroupMemberResponse) {
    option (google.api.http) = {delete: "/v1/groups/{group_id}/members"};
  }

  // ListGroupMembers
  rpc ListGroupMembers(ListGroupMembersRequest) returns (ListGroupMembersResponse) {
    option (google.api.http) = {get: "/v1/groups/{group_id}/members"};
  }
}

// Client service

message Client {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string client_secret = 4;
  string pool_id = 5 [(validate.rules).string.uuid = true];
  Permission permission = 6;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  Account CreatedByUser = 12;
}

message CreateClientRequest {
  string pool_id = 2 [(validate.rules).string.uuid = true];
  string name = 3;
  string redirect_uri = 4;
}

message CreateClientResponse {
  Client client = 1;
}

message GetClientRequest {
  string client_id = 1 [(validate.rules).string.uuid = true];
}

message GetClientResponse {
  Client client = 1;
}

message ListClientsRequest {
  string pool_id = 2 [(validate.rules).string.uuid = true];
  Page page = 3;
}

message ListClientsResponse {
  repeated Client clients = 1;
  Meta meta = 2;
}

message UpdateClientRequest {
  string client_id = 1 [(validate.rules).string.uuid = true];
  optional string name = 2;
  optional string redirect_uri = 3;
  optional Permission permission = 4;
}

message UpdateClientResponse {
  Client client = 1;
}

message DeleteClientRequest {
  string client_id = 1 [(validate.rules).string.uuid = true];
}

message DeleteClientResponse {
  string message = 1;
}

service ClientService {
  // CreateClient
  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse) {
    option (google.api.http) = {
      post: "/v1/clients/pools/{pool_id}"
      body: "*"
    };
  }

  // GetClient
  rpc GetClient(GetClientRequest) returns (GetClientResponse) {
    option (google.api.http) = {get: "/v1/clients/{client_id}"};
  }

  // ListClients
  rpc ListClients(ListClientsRequest) returns (ListClientsResponse) {
    option (google.api.http) = {get: "/v1/clients/-/pools/{pool_id}"};
  }

  // UpdateClient
  rpc UpdateClient(UpdateClientRequest) returns (UpdateClientResponse) {
    option (google.api.http) = {
      put: "/v1/clients/{client_id}"
      body: "*"
    };
  }

  // DeleteClient
  rpc DeleteClient(DeleteClientRequest) returns (DeleteClientResponse) {
    option (google.api.http) = {delete: "/v1/clients/{client_id}"};
  }
}

// Account service

message Account {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  string visible_name = 4;
  bool disabled = 5;
  bool member = 6;
  string kind = 7;
  string pool_id = 8 [(validate.rules).string.uuid = true];
  string project_id = 9 [(validate.rules).string.uuid = true];

  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  google.protobuf.Timestamp last_used_at = 13;
  optional google.protobuf.Timestamp verified_at = 14;
}

message GetAccountRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetAccountResponse {
  Account account = 1;
}

message ListAccountsRequest {
  optional string project_id = 1 [(validate.rules).string.uuid = true];
  optional string pool_id = 3 [(validate.rules).string.uuid = true];
  optional string role_name = 4;
  Page page = 5;
}

message ListAccountsResponse {
  repeated Account accounts = 1;
  Meta meta = 2;
}

message UpdateAccountRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string visible_name = 2;
  string project_id = 4 [(validate.rules).string.uuid = true];
}

message UpdateAccountResponse {
  Account account = 1;
}

message DeleteAccountRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string project_id = 2 [(validate.rules).string.uuid = true];
}

message DeleteAccountResponse {
  string message = 1;
}

message ListActiveAccountsRequest {
  string pool_id = 1 [(validate.rules).string.uuid = true];
  optional Page page = 2;
}

message ListActiveAccountsResponse {
  repeated Account accounts = 1;
  Meta meta = 2;
}

message ListInactiveAccountsRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  optional Page page = 2;
}

message ListInactiveAccountsResponse {
  repeated Account users = 1;
  Meta meta = 2;
}

message DisableAccountRequest {
  string account_id = 2 [(validate.rules).string.uuid = true];
}

message DisableAccountResponse {
  string message = 1;
}

message EnableAccountRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
}

message EnableAccountResponse {
  string message = 1;
}

service AccountService {
  // CreateAccount
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/v1/clients/{client_id}/accounts"
      body: "*"
    };
  }

  // GetAccount
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {post: "/v1/projects/-/users/{id}"};
  }

  // ListAccounts
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    option (google.api.http) = {get: "/v1/accounts"};
  }

  // UpdateAccount
  rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
    option (google.api.http) = {
      put: "/v1/projects/{project_id}/users/{id}"
      body: "*"
    };
  }

  // DeleteAccount
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
    option (google.api.http) = {delete: "/v1/projects/{project_id}/users/{id}"};
  }

  // ActivateAccounts
  rpc ListActiveAccounts(ListActiveAccountsRequest) returns (ListActiveAccountsResponse) {
    option (google.api.http) = {get: "/v1/pool/{pool_id}/users/active"};
  }

  // InactiveAccounts
  rpc ListInactiveAccounts(ListInactiveAccountsRequest) returns (ListInactiveAccountsResponse) {
    option (google.api.http) = {get: "/v1/projects/{project_id}/users/inactive"};
  }

  // DisableAccount
  rpc DisableAccount(DisableAccountRequest) returns (DisableAccountResponse) {
    option (google.api.http) = {delete: "/v1/projects/-/users/{account_id}/disable"};
  }

  // EnableAccount
  rpc EnableAccount(EnableAccountRequest) returns (EnableAccountResponse) {
    option (google.api.http) = {delete: "/v1/projects/-/accounts/{account_id}/enable"};
  }
}

message Tokens {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp issued_at = 4;
  google.protobuf.Timestamp refresh_expires_at = 5;
}

message AuthToken {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp issued_at = 4;
  google.protobuf.Timestamp refresh_expires_at = 5;
}

// Session

message Session {
  string id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
  string project_id = 3 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp expires_at = 11;
}

message ListAccountSessionRequest {
  string account_id = 1 [(validate.rules).string.uuid = true];
  string pool_id = 2 [(validate.rules).string.uuid = true];
}

message ListAccountSessionResponse {
  repeated Session sessions = 1;
  Meta meta = 2;
}

message DeleteSessionsRequest {
  string session_id = 1 [(validate.rules).string.uuid = true];
}

message DeleteSessionsResponse {
  uint64 session_count = 1;
  string message = 2;
}

message DeleteAllSessionsRequest {
  string account_id = 1 [(validate.rules).string.uuid = true];
}

message DeleteAllSessionsResponse {
  string message = 1;
}

service SessionService {
  // ListAccountSession
  rpc ListAccountSession(ListAccountSessionRequest) returns (ListAccountSessionResponse) {
    option (google.api.http) = {get: "/v1/accounts/{account_id}/sessions"};
  }

  // DeleteSessions
  rpc DeleteSessions(DeleteSessionsRequest) returns (DeleteSessionsResponse) {
    option (google.api.http) = {delete: "/v1/accounts/-/sessions/{session_id}"};
  }

  // DeleteAllSessions
  rpc DeleteAllSessions(DeleteAllSessionsRequest) returns (DeleteAllSessionsResponse) {
    option (google.api.http) = {delete: "/v1/accounts/{account_id}/sessions"};
  }
}

// Auth service

message RegisterUsingPasswordRequest {
  string Project_id = 1 [(validate.rules).string.uuid = true];
  string username = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string email = 3 [(validate.rules).string.email = true];
  string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message RegisterUsingPasswordResponse {
  string message = 1;
}

message LoginUsingPasswordRequest {
  string email = 2 [(validate.rules).string.email = true];
  string password = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  string client_id = 4 [(validate.rules).string.uuid = true];
}

message LoginUsingPasswordResponse {
  Account user = 1;
  AuthToken token = 2;
}

message LoginUsingIdpRequest {
  string provider = 1;
  string client_id = 2;
}

message LoginUsingIdpResponse {
  string message = 1;
  string redirect_url = 2;
}

message GetIdpTokenRequest {
  string provider = 1;
  string code = 2;
  string project_id = 3 [(validate.rules).string.uuid = true];
}

message GetIdpTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp issued_at = 4;
  google.protobuf.Timestamp refresh_expires_at = 5;
}

message LogoutRequest {
  string access_token = 1;
}

message LogoutResponse {
  string message = 1;
}

message RefreshRequest {
  string refresh_token = 1;
}

message RefreshResponse {
  Tokens tokens = 1;
}

message VerifyEmailRequest {
  string token = 1;
  string project_id = 2 [(validate.rules).string.uuid = true];
}

message VerifyEmailResponse {
  string message = 1;
}

message AccountEmailExistsRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message AccountEmailExistsResponse {
  bool email_exists = 1;
  bool username_exists = 2;
}

message ForgotPasswordRequest {
  string email = 1 [(validate.rules).string.email = true];
  string pool_id = 2 [(validate.rules).string.uuid = true];
}

message ForgotPasswordResponse {
  string message = 1;
}

message ResetPasswordRequest {
  string code = 1;
  string new_password = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message ResetPasswordResponse {
  string message = 1;
}

message ChangePasswordRequest {
  string account_id = 1 [(validate.rules).string.uuid = true];
  string new_password = 2 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
}

message ChangePasswordResponse {
  string message = 1;
}

service AuthService {
  // AccountEmailExists
  rpc AccountEmailExists(AccountEmailExistsRequest) returns (AccountEmailExistsResponse) {
    option (google.api.http) = {
      post: "/v1/auth/check-user"
      body: "*"
    };
  }

  // RegisterUsingPassword
  rpc RegisterUsingPassword(RegisterUsingPasswordRequest) returns (RegisterUsingPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signup/password"
      body: "*"
    };
  }

  // LoginUsingPassword
  rpc LoginUsingPassword(LoginUsingPasswordRequest) returns (LoginUsingPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signin/password"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {operation_id: "LoginUsingPassword"};
  }

  // LoginUsingIdp
  rpc LoginUsingIdp(LoginUsingPasswordRequest) returns (LoginUsingPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/signin/idp"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "LoginUsingIdentityProvider"
      description: "Login using identity provider (idp)"
    };
  }

  // GetIdpToken
  rpc GetIdpToken(GetIdpTokenRequest) returns (GetIdpTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/idp/token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "GetIdpToken"
      description: "Get idp token from code"
    };
  }

  // Logout
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/singout"
      body: "*"
    };
  }

  // Refresh
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
      body: "*"
    };
  }

  // VerifyEmail
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v1/auth/verify-email"
      body: "*"
    };
  }

  // ResetPassword
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/reset-password"
      body: "*"
    };
  }

  // ChangePassword
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/change-password"
      body: "*"
    };
  }

  // ForgotPassword
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/forgot-password"
      body: "*"
    };
  }
}

// AccessKey

// AccessKey is a token that can be used to interact with the API server
message AccessKey {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string access_key = 3;
  string client_id = 5;
  string project_id = 6;
  repeated string scopes = 7;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp expires_at = 11;
}

message CreateAccessKeyRequest {
  string pool_id = 2;
  string email = 3 [
    (validate.rules).string.min_len = 6,
    (validate.rules).string.max_len = 64
  ];
  string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional int64 expires_in = 5; // in seconds
  optional string name = 6;
  repeated string scopes = 7;
  repeated string roles = 8;
}

message CreateAccessKeyResponse {
  AccessKey token = 1;
}

message GetAccessKeyRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetAccessKeyResponse {
  AccessKey token = 1;
}

message ListAccessKeysRequest {
  optional string account_id = 1 [(validate.rules).string.uuid = true];
  optional string project_id = 2 [(validate.rules).string.uuid = true];
  Page page = 5;
}

message ListAccessKeysResponse {
  repeated AccessKey tokens = 1;
  Meta meta = 2;
}

message DeleteAccessKeyRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteAccessKeyResponse {
  string message = 1;
}

message AccessKeyPermissionRequest {
  string token = 1;
}

message AccessKeyPermissionResponse {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permission = 3;
}

message GetAccessKeyAccountRequest {}

message GetAccessKeyAccountResponse {
  Account account = 1;
}

service AccessKeyService {
  // CreateAccessKey
  rpc CreateAccessKey(CreateAccessKeyRequest) returns (CreateAccessKeyResponse) {
    option (google.api.http) = {
      post: "/v1/tokens"
      body: "*"
    };
  }

  // GetAccessKey
  rpc GetAccessKey(GetAccessKeyRequest) returns (GetAccessKeyResponse) {
    option (google.api.http) = {get: "/v1/tokens/{id}"};
  }

  // ListAccessKeys
  rpc ListAccessKeys(ListAccessKeysRequest) returns (ListAccessKeysResponse) {
    option (google.api.http) = {get: "/v1/tokens"};
  }

  // DeleteAccessKey
  rpc DeleteAccessKey(DeleteAccessKeyRequest) returns (DeleteAccessKeyResponse) {
    option (google.api.http) = {delete: "/v1/tokens/{id}"};
  }

  rpc GetAccessKeyAccount(GetAccessKeyAccountRequest) returns (GetAccessKeyAccountResponse) {
    option (google.api.http) = {delete: "/v1/tokens/-/account"};
  }
}

// Provider service

message OAuthProvider {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  string client_id = 3;
  string client_secret = 4;
  repeated string redirect_uris = 5;
}

message AddOauthProviderRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  OAuthProvider provider = 2;
}

message AddOauthProviderResponse {
  string message = 1;
}

message GetOauthProviderRequest {
  string provider = 1;
  string project_id = 2 [(validate.rules).string.uuid = true];
}

message GetOauthProviderResponse {
  OAuthProvider provider = 1;
}

message ListOauthProvidersRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  Page page = 2;
}

message ListOauthProvidersResponse {
  repeated OAuthProvider providers = 1;
  Meta meta = 2;
}

message UpdateOauthProviderRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string provider = 2;
  string client_id = 3;
  string client_secret = 4;
  repeated string redirect_uris = 5;
}

message UpdateOauthProviderResponse {
  string message = 1;
}

message DeleteOauthProviderRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message DeleteOauthProviderResponse {
  string message = 1;
}

// OAuth2 service

message OAuth2LoginRequest {
  string client_id = 1;
  string provider = 2;
}

message OAuth2LoginResponse {
  OAuthProvider provider = 1;
  string callback_url = 2;
}

message OAuth2CallbackRequest {
  string code = 1;
  string state = 3;
}

message OAuth2CallbackResponse {
  optional Tokens tokens = 1;
}

message TokenRequest {
  string code = 1;
  string provider = 2;
  string project = 3;
  string state = 4;
}

message TokenResponse {
  Tokens tokens = 1;
}

message OAuth2LogoutRequest {
  string access_token = 3;
}

message OAuth2LogoutResponse {
  string message = 1;
}

message VerifyOAuth2TokenRequest {
  string token = 1;
}

message VerifyOAuth2TokenResponse {
  string project_id = 1 [(validate.rules).string.uuid = true];
  string account_id = 2 [(validate.rules).string.uuid = true];
  repeated Permission permission = 3;
}

service OAuth2Service {
  // OAuth2Auth
  rpc OAuth2Auth(OAuth2LoginRequest) returns (OAuth2LoginResponse) {
    option (google.api.http) = {
      post: "/v1/oauth2/auth"
      body: "*"
    };
  }

  // OAuth2Token
  rpc OAuth2Token(OAuth2CallbackRequest) returns (OAuth2CallbackResponse) {
    option (google.api.http) = {
      post: "/v1/oauth2/token"
      body: "*"
    };
  }
}

message CreateAccountRequest {
  string client_id = 1 [(validate.rules).string.uuid = true];
  string client_secret = 2;
  string email = 3 [(validate.rules).string.email = true];
  string username = 4;
  string visible_name = 5;
  string password = 6 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 11
  ];
}

message CreateAccountResponse {
  string id = 1 [(validate.rules).string.uuid = true];
  string email = 2 [(validate.rules).string.email = true];
  string username = 3;
  google.protobuf.Timestamp created_at = 10;
}

// Project service

service ProjectService {
  // CreateProject
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "*"
    };
  }

  // GetProject
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {get: "/v1/projects/{id}"};
  }

  // ListProjects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {get: "/v1/projects"};
  }

  // UpdateProject
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put: "/v1/projects/{id}"
      body: "*"
    };
  }

  // DeleteProject
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {delete: "/v1/projects/{id}"};
  }

  // AddOauthProvider
  rpc AddOauthProvider(AddOauthProviderRequest) returns (AddOauthProviderResponse) {
    option (google.api.http) = {
      post: "/v1/projects/{project_id}/oauth-providers"
      body: "*"
    };
  }

  // GetOauthProvider
  rpc GetOauthProvider(GetOauthProviderRequest) returns (GetOauthProviderResponse) {
    option (google.api.http) = {get: "/v1/projects/{project_id}/oauth-providers/{provider}"};
  }

  // ListOauthProviders
  rpc ListOauthProviders(ListOauthProvidersRequest) returns (ListOauthProvidersResponse) {
    option (google.api.http) = {get: "/v1/projects/{project_id}/oauth-providers"};
  }

  // UpdateOauthProvider
  rpc UpdateOauthProvider(UpdateOauthProviderRequest) returns (UpdateOauthProviderResponse) {
    option (google.api.http) = {
      put: "/v1/projects/{project_id}/oauth-providers/{provider}"
      body: "*"
    };
  }

  // DeleteOauthProvider
  rpc DeleteOauthProvider(DeleteOauthProviderRequest) returns (DeleteOauthProviderResponse) {
    option (google.api.http) = {delete: "/v1/projects/{id}/oauth-providers"};
  }
}

message CreateAdminProjectRequest {
  string name = 1 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ]; // project name
  string visible_name = 2;
  string email = 3 [(validate.rules).string.email = true];
  optional string password = 4 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 64
  ];
  optional bool verify_email = 5;
}

message CreateAdminProjectResponse {
  Project project = 1;
}

message CreateMigrationRequest {
  string project_id = 1 [(validate.rules).string.uuid = true];
}

message CreateMigrationResponse {
  string message = 1;
}

service AdminProjectService {
  // CreateAdminProject
  rpc CreateAdminProject(CreateAdminProjectRequest) returns (CreateAdminProjectResponse) {
    option (google.api.http) = {
      post: "/v1/admin/projects"
      body: "*"
    };
  }

  // CreateMigration
  rpc CreateMigration(CreateMigrationRequest) returns (CreateMigrationResponse) {
    option (google.api.http) = {
      post: "/v1/admin/migrations"
      body: "*"
    };
  }
}

message VerifyTokenRequest {
  string token = 1;
}

message VerifyTokenResponse {
  bool valid = 1;
  string user_id = 2 [(validate.rules).string.uuid = true];
  string pool_id = 3 [(validate.rules).string.uuid = true];
  string project_id = 4 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp issued_at = 10;
  google.protobuf.Timestamp expires_at = 11;
}

service TokenService {
  rpc VerifyToken(VerifyTokenRequest) returns (VerifyTokenResponse) {
    option (google.api.http) = {
      post: "/v1/token/verify"
      body: "*"
    };
  }
}

enum Permission {
  UNKNOWN = 0; // default
  NONE = 1; // no permission
  VIEWER = 2; // viewer permission
  ADMIN = 4; // admin permission
  OWNER = 8; // owner permission, can do anything, including delete the project, can not be removed while the project exists
}

message Page {
  int32 page = 1;
  int32 size = 2;
}

message Meta {
  int32 total = 1;
  int32 page = 2;
  int32 size = 3;
}
